{"version":3,"sources":["components/DailyForecast.js","components/WeatherCard.js","components/WeeklyForecast.js","router/AppRouter.js","helpers/fetchData.js","WeatherApp.js","index.js"],"names":["a","JSON","parse","localStorage","getItem","lat","latitude","lon","longitude","url","process","fetch","resp","json","data","config","DailyForecast","useState","setData","day","useParams","useEffect","getData","then","console","log","dataItem","list","filter","item","dt_txt","substring","map","to","date","className","moment","format","hourly","key","dt","src","weather","icon","alt","main","temp","WeatherCard","id","min","max","Date","toDateString","linkId","toISOString","style","textDecoration","color","WeeklyForecast","daily","AppRouter","basename","exact","path","children","fetchData","getCoordinates","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","WeatherApp","getAddress","loc","setItem","stringify","error","shift","pop","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.fd7c3899.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, Redirect, useParams } from 'react-router-dom';\r\nimport { config } from 'dotenv';\r\nimport moment from 'moment';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nconfig();\r\n\r\nasync function getData() {\r\n\r\n  const {latitude: lat, longitude: lon} = JSON.parse(localStorage.getItem('location'));\r\n\r\n  const url =  `http://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_API_KEY}&units=metric`;\r\n  \r\n  const resp = await fetch(url);\r\n  const data = await resp.json();\r\n  //console.log(data);\r\n  return data;\r\n}\r\n\r\nexport const DailyForecast =  () => {  \r\n\r\n  const [data, setData] = useState('');\r\n  \r\n  let { day } = useParams();   \r\n  \r\n  useEffect(() => {   \r\n\r\n    getData().then( data => {\r\n      setData(data)\r\n    })   \r\n    \r\n  }, [])  \r\n  \r\n  console.log(data);\r\n  \r\n  if ( !data ) {\r\n    return (\r\n      <div>Loading...</div>\r\n    )\r\n    // return (\r\n    //   <Redirect to='/' />\r\n    // )\r\n  }\r\n\r\n  const dataItem = data.list.filter( item => {\r\n    //const itemDate = new Date(item.dt_txt*1000).toISOString().substring(0,10);    \r\n    //console.log(item.dt_txt.substring(0,10), day);\r\n   return item.dt_txt.substring(0,10) === day\r\n  }\r\n  );\r\n\r\n  data.list.map( item => {\r\n    //console.log(item);\r\n  })\r\n\r\n  console.log(dataItem);\r\n\r\n  if ( !dataItem ) {\r\n    return (\r\n      <Redirect to='/' />\r\n    )\r\n  }\r\n    \r\n  //const {humidity, pressure, temp_min: min, temp_max: max} = dataItem.main;  \r\n\r\n   //const {main,icon,description} = dataItem.weather[0];\r\n\r\n  // //const date = new Date(dataItem.dt*1000).toDateString(); \r\n   const date = (dataItem[0].dt_txt.substring(0,10) );\r\n   \r\n\r\n  return (\r\n    <>\r\n    <div className=\"weather-detail\">\r\n      <h4>{moment(date).format(\"LL\")}</h4>\r\n    \r\n    { \r\n      dataItem.map( hourly => (\r\n\r\n        <li key={hourly.dt}>{moment(hourly.dt_txt).format(\"LT\")} <img src={`http://openweathermap.org/img/wn/${hourly.weather[0].icon}@2x.png`} alt=\"weather\"/>{} {hourly.main.temp} °C</li>\r\n\r\n\r\n      ))\r\n    }\r\n    <p>\r\n      <Link to=\"/\">\r\n        Back\r\n      </Link>\r\n    </p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\n/*\r\n<div className=\"weather-detail\">\r\n      <h4>{date}</h4>\r\n      <p><strong>Forecast: </strong>{main} - {description}</p>\r\n      <div className=\"img-detail\">\r\n        <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"weather\"/>\r\n      </div>\r\n      <div className=\"temps-detail\">\r\n        <p><strong>Humidity:</strong> {humidity} % </p>\r\n        <p><strong>Pressure:</strong> {pressure} hPa </p>\r\n        <p><strong>Min:</strong> {min} °C </p>\r\n        <p><strong>Max:</strong> {max} °C </p>\r\n      </div>\r\n    </div>\r\n    <div className=\"backBtn\">\r\n      <Link to='/'>\r\n        <button>Back</button>\r\n      </Link>\r\n    </div>\r\n\r\n*/","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { config } from 'dotenv';\r\nconfig();\r\n\r\nexport const WeatherCard = ({id, data}) => {\r\n\r\n  //console.log(data, id);\r\n \r\n  const {min,max} = data.temp;\r\n  const {icon} = data.weather[0];\r\n\r\n  const day = new Date(data.dt*1000).toDateString().substring(0,3);\r\n\r\n  const linkId = new Date(data.dt*1000).toISOString().substring(0,10);\r\n\r\n  const style = {\r\n    textDecoration: 'none',\r\n    color: '#000'\r\n  }\r\n  \r\n  return (\r\n    <>\r\n    <Link style={style} to={`/${linkId}`}>\r\n      <div className=\"card\">\r\n        <div className=\"title\">{day}</div>      \r\n        <div className=\"img-day\">\r\n          <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"weather\"/>\r\n        </div>\r\n        <div className=\"temps\">\r\n          <p className=\"min\">Min: {min} °C</p>\r\n          <p className=\"max\">Max: {max} °C</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport { WeatherCard } from './WeatherCard';\r\n\r\nexport const WeeklyForecast = ({data}) => {  \r\n\r\n  //console.log(data);\r\n\r\n  return (\r\n    <>\r\n      <h1>WeeklyForecast</h1>\r\n      <hr/>\r\n      <div className=\"card-container\">\r\n        {\r\n          data&&data.daily.map( day => {                       \r\n            return <WeatherCard \r\n            id={day.dt}\r\n            key={day.dt} \r\n            data={day}             \r\n            />\r\n          })\r\n        }        \r\n      </div>      \r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n// dt_txt: \"2020-10-08 21:00:00\"\r\n\r\n// new Date(1602259200*1000).toISOString()\r\n// \"2020-10-09T16:00:00.000Z\"\r\n\r\n","import React from 'react'\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport { DailyForecast } from '../components/DailyForecast';\r\nimport { WeeklyForecast } from '../components/WeeklyForecast';\r\nimport { config } from 'dotenv';\r\nconfig();\r\n\r\nexport const AppRouter = ({data}) => {    \r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n    <div className=\"container\">\r\n      <Switch>      \r\n        <Route exact path='/'>\r\n          <WeeklyForecast data={data} />\r\n        </Route> \r\n        <Route path='/:day' children={ <DailyForecast />} />          \r\n      \r\n      </Switch>\r\n    </div>\r\n    </Router>  \r\n  ) \r\n}\r\n","export const fetchData = async( {latitude: lat, longitude: lon} ) => {\r\n\r\n  // 5 DAYS!!!!\r\n  //const url = `http://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=24d7eab231aa80194d6732c8effdded4`\r\n\r\n  // Daily forecast for 7 days\r\n  const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=current,minutely,alerts&appid=${process.env.REACT_APP_API_KEY}&units=metric`\r\n\r\n  const resp = await fetch(url);\r\n  const data = await resp.json();\r\n\r\n  return data;\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { AppRouter } from './router/AppRouter';\r\nimport { fetchData } from './helpers/fetchData';\r\n\r\nconst getCoordinates = () => {\r\n  return new Promise(function(resolve, reject) {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject);\r\n  });\r\n}\r\n\r\nasync function getAddress() {\r\n  const position = await getCoordinates(); \r\n  let latitude = position.coords.latitude;\r\n  let longitude = position.coords.longitude; \r\n  return {\r\n    latitude,\r\n    longitude\r\n  };  \r\n}\r\n\r\nexport const WeatherApp = () => {   \r\n\r\n  const [data, setData] = useState('');\r\n\r\n  useEffect(() => {    \r\n    getAddress().then( (loc) => {  \r\n      try {\r\n        localStorage.setItem('location', JSON.stringify(loc));\r\n      } catch (error) {\r\n        console.log(error);\r\n      }   \r\n      fetchData(loc).then( data => {\r\n        data.daily.shift()\r\n        data.daily.pop()\r\n        data.daily.pop()\r\n        setData(data);\r\n      });\r\n    })   \r\n  }, []);\r\n\r\n  console.log(data);\r\n\r\n  return (\r\n    <>\r\n      {data&&<AppRouter data={data} /> }\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport { WeatherApp } from './WeatherApp';\r\nimport './styles.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WeatherApp />\r\n  </React.StrictMode>, document.querySelector('#root'));"],"sourceRoot":""}