{"version":3,"sources":["components/DailyForecast.js","components/WeatherCard.js","components/WeeklyForecast.js","router/AppRouter.js","helpers/fetchData.js","WeatherApp.js","index.js"],"names":["config","DailyForecast","data","day","useParams","dataItem","list","filter","item","dt_txt","substring","to","date","className","moment","format","map","hourly","key","dt","src","weather","icon","alt","main","temp","WeatherCard","id","min","max","Date","toDateString","linkId","toISOString","humidity","pressure","style","textDecoration","color","Math","round","WeeklyForecast","str","timezone","area","exec","daily","AppRouter","shift","pop","basename","process","exact","path","children","fetchData","a","lat","latitude","lon","longitude","url","fetch","resp","json","datos","push","getCoordinates","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","WeatherApp","useState","setData","useEffect","getAddress","then","loc","localStorage","setItem","JSON","stringify","error","console","log","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.914959f1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, Redirect, useParams } from 'react-router-dom';\r\nimport { config } from 'dotenv';\r\nimport moment from 'moment';\r\nconfig();\r\n\r\nexport const DailyForecast =  ({data}) => {  \r\n\r\n  let { day } = useParams();     \r\n  \r\n  if ( !data ) {\r\n    return (\r\n      <div>Loading...</div>\r\n    )   \r\n  }\r\n\r\n  const dataItem = data[1].list.filter( item => {    \r\n   return item.dt_txt.substring(0,10) === day\r\n  }\r\n  );\r\n\r\n  \r\n  if ( !dataItem ) {\r\n    return (\r\n      <Redirect to='/' />\r\n    )\r\n  }\r\n      \r\n  const date = (dataItem[0].dt_txt.substring(0,10) );   \r\n\r\n  return (\r\n    <>\r\n    <div className=\"weather-detail\">\r\n      <h4>{moment(date).format(\"LL\")}</h4>\r\n    \r\n    { \r\n      dataItem.map( hourly => (\r\n\r\n        <li key={hourly.dt}>{moment(hourly.dt_txt).format(\"LT\")} <img src={`https://openweathermap.org/img/wn/${hourly.weather[0].icon}@2x.png`} alt=\"weather\"/>{} {hourly.main.temp} °C</li>\r\n\r\n\r\n      ))\r\n    }\r\n    <p>\r\n      <Link to=\"/\">\r\n        Back\r\n      </Link>\r\n    </p>\r\n    </div>\r\n    </>\r\n  )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { config } from 'dotenv';\r\nconfig();\r\n\r\nexport const WeatherCard = ({id, data}) => {\r\n \r\n  const {min,max} = data.temp;\r\n  const {icon} = data.weather[0];\r\n\r\n  const day = new Date(data.dt*1000).toDateString().substring(0,3);\r\n\r\n  const linkId = new Date(data.dt*1000).toISOString().substring(0,10);\r\n\r\n  const style = {\r\n    textDecoration: 'none',\r\n    color: '#000'\r\n  }\r\n\r\n  const {humidity, pressure} = data;\r\n  \r\n  \r\n  return (\r\n    <>\r\n    <Link style={style} to={`/${linkId}`}>\r\n      <div className=\"card\">\r\n        <div className=\"title\">{day}</div>      \r\n        <div className=\"img-day\">\r\n          <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"weather\"/>\r\n        </div>\r\n        <div className=\"temps\">\r\n          <p>Min: {Math.round(min)} °C</p>\r\n          <p>Max: {Math.round(max)} °C</p>\r\n          <p>Humidity: {humidity}%</p>\r\n          <p>Pressure: {pressure}hPa</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport { WeatherCard } from './WeatherCard';\r\n\r\nexport const WeeklyForecast = ({data}) => {    \r\n\r\n  const regex = /\\w*$/gm;\r\n  const str = data[0].timezone;\r\n  const area = regex.exec(str)[0];  \r\n\r\n  return (\r\n    <>\r\n      <h1>WeeklyForecast for {area}</h1>\r\n      <hr/>\r\n      <div className=\"card-container\">\r\n        {\r\n          data&&data[0].daily.map( day => {                       \r\n            return <WeatherCard             \r\n            key={day.dt} \r\n            data={day}             \r\n            />\r\n          })\r\n        }        \r\n      </div>      \r\n    </>\r\n  )\r\n}","import React from 'react'\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport { DailyForecast } from '../components/DailyForecast';\r\nimport { WeeklyForecast } from '../components/WeeklyForecast';\r\nimport { config } from 'dotenv';\r\nconfig();\r\n\r\nexport const AppRouter = ({data}) => {   \r\n  \r\n  data[0].daily.shift();\r\n  data[0].daily.pop();\r\n  data[0].daily.pop();\r\n\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n    <div className=\"container\">\r\n      <Switch>      \r\n        <Route exact path='/'>\r\n          <WeeklyForecast data={data} />\r\n        </Route> \r\n        <Route path='/:day' children={ <DailyForecast data={data} />} />          \r\n      \r\n      </Switch>\r\n    </div>\r\n    </Router>  \r\n  ) \r\n}\r\n","export const fetchData = async( {latitude: lat, longitude: lon} ) => {\r\n\r\n  let url = [\r\n    `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=current,minutely,alerts&appid=${process.env.REACT_APP_API_KEY}&units=metric`,\r\n    `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_API_KEY}&units=metric` \r\n  ];\r\n   \r\n  const data = [];\r\n\r\n  let resp = await fetch(url[0]); // ONECALL > WEEKLY\r\n  let datos = await resp.json();\r\n  data.push(datos);\r\n  \r\n  resp = await fetch(url[1]); // FORECAST > Hours\r\n  datos = await resp.json();\r\n  data.push(datos);\r\n  \r\n\r\n  // 5 DAYS!!!!\r\n  //const url = `http://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_API_KEY}&units=metric`\r\n\r\n  // Daily forecast for 7 days\r\n  //const \r\n\r\n  \r\n\r\n  return data;\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { AppRouter } from './router/AppRouter';\r\nimport { fetchData } from './helpers/fetchData';\r\n\r\nconst getCoordinates = () => {\r\n  return new Promise(function(resolve, reject) {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject);\r\n  });\r\n}\r\n\r\nasync function getAddress() {\r\n  const position = await getCoordinates(); \r\n  let latitude = position.coords.latitude;\r\n  let longitude = position.coords.longitude; \r\n  return {\r\n    latitude,\r\n    longitude\r\n  };  \r\n}\r\n\r\nexport const WeatherApp = () => {   \r\n\r\n  const [data, setData] = useState('');\r\n\r\n  useEffect(() => {    \r\n    getAddress().then( (loc) => {  \r\n      try {\r\n        localStorage.setItem('location', JSON.stringify(loc));\r\n      } catch (error) {\r\n        console.log(error);\r\n      }   \r\n      fetchData(loc).then( data => {        \r\n        setData(data);\r\n      });\r\n    })   \r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {data&&<AppRouter data={data} /> }\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport { WeatherApp } from './WeatherApp';\r\nimport './styles.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WeatherApp />\r\n  </React.StrictMode>, document.querySelector('#root'));"],"sourceRoot":""}