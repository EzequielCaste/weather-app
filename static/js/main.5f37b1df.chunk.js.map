{"version":3,"sources":["components/DailyForecast.js","components/WeatherCard.js","components/WeeklyForecast.js","router/AppRouter.js","helpers/fetchData.js","WeatherApp.js","index.js"],"names":["DailyForecast","data","day","useParams","dataItem","daily","filter","item","dt","Number","humidity","pressure","temp","min","max","weather","main","icon","description","date","Date","toDateString","className","src","alt","to","WeatherCard","id","substring","style","textDecoration","color","WeeklyForecast","map","key","AppRouter","exact","path","render","props","fetchData","a","lat","latitude","lon","longitude","url","process","fetch","resp","json","config","getCoordinates","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","WeatherApp","useState","setData","useEffect","getAddress","then","loc","ReactDOM","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.5f37b1df.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\n\r\nexport const DailyForecast =  ({data}) => { \r\n\r\n  let { day } = useParams();   \r\n\r\n  const dataItem = data.daily.filter( item => item.dt === Number(day))[0];\r\n    \r\n  const {humidity, pressure} = dataItem;\r\n  const {min,max} = dataItem.temp;\r\n  const {main,icon,description} = dataItem.weather[0];\r\n  const date = new Date(dataItem.dt*1000).toDateString(); \r\n\r\n  return (\r\n    <>\r\n    <div className=\"weather-detail\">\r\n      <h4>{date}</h4>\r\n      <p><strong>Forecast: </strong>{main} - {description}</p>\r\n      <div className=\"img-detail\">\r\n        <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"weather\"/>\r\n      </div>\r\n      <div className=\"temps-detail\">\r\n        <p><strong>Humidity:</strong> {humidity} % </p>\r\n        <p><strong>Pressure:</strong> {pressure} hPa </p>\r\n        <p><strong>Min:</strong> {min} 째C </p>\r\n        <p><strong>Max:</strong> {max} 째C </p>\r\n      </div>\r\n    </div>\r\n    <div className=\"backBtn\">\r\n      <Link to=\"/\">\r\n        <button>Back</button>\r\n      </Link>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const WeatherCard = ({id, data}) => {\r\n \r\n  const {min,max} = data.temp;\r\n  const {icon} = data.weather[0];\r\n\r\n  const day = new Date(data.dt*1000).toDateString().substring(0,3)\r\n\r\n  const style = {\r\n    textDecoration: 'none',\r\n    color: '#000'\r\n  }\r\n  \r\n  return (\r\n    <>\r\n    <Link style={style} to={`${id}`}>\r\n      <div className=\"card\">\r\n        <div className=\"title\">{day}</div>      \r\n        <div className=\"img-day\">\r\n          <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"weather\"/>\r\n        </div>\r\n        <div className=\"temps\">\r\n          <p className=\"min\">Min: {min} 째C</p>\r\n          <p className=\"max\">Max: {max} 째C</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport { WeatherCard } from './WeatherCard';\r\n\r\nexport const WeeklyForecast = ({data}) => {  \r\n\r\n  return (\r\n    <>\r\n      <h1>WeeklyForecast</h1>\r\n      <hr/>\r\n      <div className=\"card-container\">\r\n        {\r\n          data&&data.daily.map( day => {            \r\n            return <WeatherCard \r\n            id={day.dt}\r\n            key={day.dt} \r\n            data={day}             \r\n            />\r\n          })\r\n        }        \r\n      </div>      \r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport { DailyForecast } from '../components/DailyForecast';\r\nimport { WeeklyForecast } from '../components/WeeklyForecast';\r\n\r\n\r\nexport const AppRouter = ({data}) => {\r\n  return (\r\n    <Router>\r\n    <div className=\"container\">\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <WeeklyForecast data={data} />\r\n        </Route> \r\n        <Route path=\"/:day\" render={(props) => <DailyForecast data={data} {...props} />} />\r\n          \r\n      </Switch>\r\n    </div>\r\n    </Router>  \r\n  )\r\n}\r\n","export const fetchData = async({latitude: lat, longitude: lon}) => {\r\n\r\n  const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=hourly,current,minutely,alerts&appid=${process.env.REACT_APP_API_KEY}&units=metric`\r\n\r\n  const resp = await fetch(url);\r\n  const data = await resp.json();\r\n\r\n  return data;\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport { config } from 'dotenv';\r\n\r\nimport { AppRouter } from './router/AppRouter';\r\nimport { fetchData } from './helpers/fetchData';\r\n\r\nconfig();\r\n\r\nconst getCoordinates = () => {\r\n  return new Promise(function(resolve, reject) {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject);\r\n  });\r\n}\r\n\r\nasync function getAddress() {\r\n  const position = await getCoordinates(); \r\n  let latitude = position.coords.latitude;\r\n  let longitude = position.coords.longitude; \r\n\r\n  return {\r\n    latitude,\r\n    longitude\r\n  };  \r\n}\r\n\r\n\r\nexport const WeatherApp = () => {   \r\n\r\n  const [data, setData] = useState('');\r\n\r\n  useEffect(() => {    \r\n    getAddress().then( (loc) => {     \r\n      fetchData(loc).then( data => {\r\n        setData(data);\r\n      });\r\n    })   \r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <AppRouter data={data} />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport { WeatherApp } from './WeatherApp';\r\nimport './styles.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WeatherApp />\r\n  </React.StrictMode>, document.querySelector('#root'));"],"sourceRoot":""}